//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectClg.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CollegeDBEntities : DbContext
    {
        public CollegeDBEntities()
            : base("name=CollegeDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<Update> Updates { get; set; }
    
        public virtual ObjectResult<Proc_GetUpdates_Result> Proc_GetUpdates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUpdates_Result>("Proc_GetUpdates");
        }
    
        public virtual int Proc_Student(string studentName, string gender, string departmentName, string rollNumber, string section, string email, Nullable<long> phoneNumber, string doorNumber, string area, string city, Nullable<int> pincode, Nullable<double> studentFee, string username, string studentPassword, string createdby)
        {
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var rollNumberParameter = rollNumber != null ?
                new ObjectParameter("RollNumber", rollNumber) :
                new ObjectParameter("RollNumber", typeof(string));
    
            var sectionParameter = section != null ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(long));
    
            var doorNumberParameter = doorNumber != null ?
                new ObjectParameter("DoorNumber", doorNumber) :
                new ObjectParameter("DoorNumber", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(int));
    
            var studentFeeParameter = studentFee.HasValue ?
                new ObjectParameter("StudentFee", studentFee) :
                new ObjectParameter("StudentFee", typeof(double));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var studentPasswordParameter = studentPassword != null ?
                new ObjectParameter("StudentPassword", studentPassword) :
                new ObjectParameter("StudentPassword", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Student", studentNameParameter, genderParameter, departmentNameParameter, rollNumberParameter, sectionParameter, emailParameter, phoneNumberParameter, doorNumberParameter, areaParameter, cityParameter, pincodeParameter, studentFeeParameter, usernameParameter, studentPasswordParameter, createdbyParameter);
        }
    
        public virtual int Proc_Teacher(string teacherName, string gender, string departmentName, string employeeId, string email, Nullable<long> phoneNumber, string doorNumber, string street, string area, string city, Nullable<int> pincode, string username, string teacherPassword, string createdby)
        {
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(long));
    
            var doorNumberParameter = doorNumber != null ?
                new ObjectParameter("DoorNumber", doorNumber) :
                new ObjectParameter("DoorNumber", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var teacherPasswordParameter = teacherPassword != null ?
                new ObjectParameter("TeacherPassword", teacherPassword) :
                new ObjectParameter("TeacherPassword", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Teacher", teacherNameParameter, genderParameter, departmentNameParameter, employeeIdParameter, emailParameter, phoneNumberParameter, doorNumberParameter, streetParameter, areaParameter, cityParameter, pincodeParameter, usernameParameter, teacherPasswordParameter, createdbyParameter);
        }
    
        public virtual int Proc_Updates(string information, string createdby)
        {
            var informationParameter = information != null ?
                new ObjectParameter("Information", information) :
                new ObjectParameter("Information", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Updates", informationParameter, createdbyParameter);
        }
    }
}
